// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Thesis.courseWebApp.Backend.Data;

#nullable disable

namespace Thesis.courseWebApp.Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240128125342_UpdateUserFavouriteCourses")]
    partial class UpdateUserFavouriteCourses
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Thesis.courseWebApp.Backend.Data.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Certification")
                        .HasColumnType("boolean")
                        .HasColumnName("Certification");

                    b.Property<string>("CourseFormat")
                        .HasColumnType("text")
                        .HasColumnName("Course_format");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Duration");

                    b.Property<string>("Language")
                        .HasColumnType("text")
                        .HasColumnName("Language");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Level");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("Location");

                    b.Property<bool>("OnSale")
                        .HasColumnType("boolean")
                        .HasColumnName("On_sale");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("Price");

                    b.Property<float?>("Rating")
                        .HasColumnType("real")
                        .HasColumnName("Rating");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Subject");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Title");

                    b.Property<string>("Town")
                        .HasColumnType("text")
                        .HasColumnName("Town");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Thesis.courseWebApp.Backend.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<List<string>>("FavouriteCourses")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("Favourite_courses");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Hashed_password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Thesis.courseWebApp.Backend.Data.UserSearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Filters")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Filters");

                    b.Property<string>("SearchQuery")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Search_query");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Timestamp");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSearches");
                });

            modelBuilder.Entity("Thesis.courseWebApp.Backend.Data.UserSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_at");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Session_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("User_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("Thesis.courseWebApp.Backend.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Full_name");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Message_content");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Phone_number");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Thesis.courseWebApp.Backend.Data.UserSearch", b =>
                {
                    b.HasOne("Thesis.courseWebApp.Backend.Data.User", "User")
                        .WithOne("Search")
                        .HasForeignKey("Thesis.courseWebApp.Backend.Data.UserSearch", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Thesis.courseWebApp.Backend.Data.UserSession", b =>
                {
                    b.HasOne("Thesis.courseWebApp.Backend.Data.User", "User")
                        .WithOne("Session")
                        .HasForeignKey("Thesis.courseWebApp.Backend.Data.UserSession", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Thesis.courseWebApp.Backend.Data.User", b =>
                {
                    b.Navigation("Search")
                        .IsRequired();

                    b.Navigation("Session")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
